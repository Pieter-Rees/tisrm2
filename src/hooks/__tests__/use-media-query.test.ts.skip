import { renderHook } from '@testing-library/react';
import { useMediaQuery, useBreakpoints } from '@/hooks/use-media-query';

// Mock matchMedia
const mockMatchMedia = (matches: boolean) => {
  if (typeof window !== 'undefined') {
    Object.defineProperty(window, 'matchMedia', {
      writable: true,
      value: jest.fn().mockImplementation((query) => ({
        matches,
        media: query,
        onchange: null,
        addListener: jest.fn(),
        removeListener: jest.fn(),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn(),
      })),
    });
  }
};

describe('useMediaQuery', () => {
  beforeEach(() => {
    // Reset matchMedia mock
    mockMatchMedia(false);
  });

  it('should return false initially when not initialized', () => {
    const { result } = renderHook(() => useMediaQuery('(max-width: 768px)'));
    expect(result.current).toBe(false);
  });

  it('should return true when media query matches', () => {
    mockMatchMedia(true);
    const { result } = renderHook(() => useMediaQuery('(max-width: 768px)'));
    
    // Force re-render to trigger useEffect
    result.current;
    
    expect(result.current).toBe(true);
  });

  it('should return false when media query does not match', () => {
    mockMatchMedia(false);
    const { result } = renderHook(() => useMediaQuery('(max-width: 768px)'));
    
    // Force re-render to trigger useEffect
    result.current;
    
    expect(result.current).toBe(false);
  });

  it('should handle different media query strings', () => {
    mockMatchMedia(true);
    const { result } = renderHook(() => useMediaQuery('(min-width: 1024px)'));
    
    result.current;
    
    expect(result.current).toBe(true);
  });

  it('should handle SSR environment (no window)', () => {
    const originalWindow = global.window;
    // @ts-ignore - We're intentionally deleting window for testing
    delete global.window;

    // The hook should return false when window is not available
    const { result } = renderHook(() => useMediaQuery('(max-width: 768px)'));
    expect(result.current).toBe(false);

    global.window = originalWindow;
  });
});

describe('useBreakpoints', () => {
  beforeEach(() => {
    mockMatchMedia(false);
  });

  it('should return all breakpoint hooks', () => {
    const { result } = renderHook(() => useBreakpoints());
    
    expect(result.current).toHaveProperty('isMobile');
    expect(result.current).toHaveProperty('isTablet');
    expect(result.current).toHaveProperty('isDesktop');
    expect(result.current).toHaveProperty('isLarge');
    expect(result.current).toHaveProperty('isXLarge');
  });

  it('should return boolean values for each breakpoint', () => {
    const { result } = renderHook(() => useBreakpoints());
    
    expect(typeof result.current.isMobile).toBe('boolean');
    expect(typeof result.current.isTablet).toBe('boolean');
    expect(typeof result.current.isDesktop).toBe('boolean');
    expect(typeof result.current.isLarge).toBe('boolean');
    expect(typeof result.current.isXLarge).toBe('boolean');
  });

  it('should use correct media queries for each breakpoint', () => {
    const { result } = renderHook(() => useBreakpoints());
    
    // All should be false initially
    expect(result.current.isMobile).toBe(false);
    expect(result.current.isTablet).toBe(false);
    expect(result.current.isDesktop).toBe(false);
    expect(result.current.isLarge).toBe(false);
    expect(result.current.isXLarge).toBe(false);
  });

  it('should handle mobile breakpoint correctly', () => {
    mockMatchMedia(true);
    const { result } = renderHook(() => useBreakpoints());
    
    result.current;
    
    expect(result.current.isMobile).toBe(true);
  });

  it('should handle tablet breakpoint correctly', () => {
    mockMatchMedia(true);
    const { result } = renderHook(() => useBreakpoints());
    
    result.current;
    
    expect(result.current.isTablet).toBe(true);
  });

  it('should handle desktop breakpoint correctly', () => {
    mockMatchMedia(true);
    const { result } = renderHook(() => useBreakpoints());
    
    result.current;
    
    expect(result.current.isDesktop).toBe(true);
  });

  it('should handle large breakpoint correctly', () => {
    mockMatchMedia(true);
    const { result } = renderHook(() => useBreakpoints());
    
    result.current;
    
    expect(result.current.isLarge).toBe(true);
  });

  it('should handle xlarge breakpoint correctly', () => {
    mockMatchMedia(true);
    const { result } = renderHook(() => useBreakpoints());
    
    result.current;
    
    expect(result.current.isXLarge).toBe(true);
  });

  it('should maintain consistent state between renders', () => {
    const { result, rerender } = renderHook(() => useBreakpoints());
    
    rerender();
    
    expect(result.current.isMobile).toBe(false);
    expect(result.current.isTablet).toBe(false);
    expect(result.current.isDesktop).toBe(false);
    expect(result.current.isLarge).toBe(false);
    expect(result.current.isXLarge).toBe(false);
  });
});
