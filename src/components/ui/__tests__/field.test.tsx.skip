import { render, screen } from '@testing-library/react';
import { Field } from '../field';

// The Field component is a forwardRef, so we need to use it directly
const FieldComponent = Field;

describe('Field Component', () => {
    const defaultProps = {
        children: <input type="text" placeholder="Enter text" />,
    };

    it('should render with children', () => {
        render(<FieldComponent {...defaultProps} />);

        const input = screen.getByPlaceholderText('Enter text');
        expect(input).toBeInTheDocument();
    });

    it('should render label when provided', () => {
        render(
            <FieldComponent {...defaultProps} label="Username">
                <input type="text" />
            </FieldComponent>
        );

        expect(screen.getByText('Username')).toBeInTheDocument();
    });

    it('should render required indicator when required is true', () => {
        render(
            <FieldComponent {...defaultProps} label="Username" required>
                <input type="text" />
            </FieldComponent>
        );

        const label = screen.getByText('Username');
        expect(label).toBeInTheDocument();

        // Check for required indicator (usually an asterisk)
        const requiredIndicator = document.querySelector('[data-required]');
        expect(requiredIndicator).toBeInTheDocument();
    });

    it('should render helper text when provided', () => {
        const helperText = 'This field is required for account creation';
        render(
            <FieldComponent {...defaultProps} helperText={helperText}>
                <input type="text" />
            </FieldComponent>
        );

        expect(screen.getByText(helperText)).toBeInTheDocument();
    });

    it('should render error text when provided', () => {
        const errorText = 'Username is already taken';
        render(
            <FieldComponent {...defaultProps} errorText={errorText}>
                <input type="text" />
            </FieldComponent>
        );

        expect(screen.getByText(errorText)).toBeInTheDocument();
    });

    it('should render error text when invalid is true', () => {
        const errorText = 'Invalid input';
        render(
            <FieldComponent {...defaultProps} errorText={errorText} invalid>
                <input type="text" />
            </FieldComponent>
        );

        expect(screen.getByText(errorText)).toBeInTheDocument();
    });

    it('should not render label when not provided', () => {
        render(<FieldComponent {...defaultProps} />);

        const labels = document.querySelectorAll('label');
        expect(labels).toHaveLength(0);
    });

    it('should not render helper text when not provided', () => {
        render(<FieldComponent {...defaultProps} />);

        const helperTexts = document.querySelectorAll('[data-helper-text]');
        expect(helperTexts).toHaveLength(0);
    });

    it('should not render error text when not provided', () => {
        render(<FieldComponent {...defaultProps} />);

        const errorTexts = document.querySelectorAll('[data-error-text]');
        expect(errorTexts).toHaveLength(0);
    });

    it('should handle complex children', () => {
        render(
            <FieldComponent {...defaultProps}>
                <div>
                    <input type="text" />
                    <button type="button">Submit</button>
                </div>
            </FieldComponent>
        );

        const input = screen.getByRole('textbox');
        const button = screen.getByRole('button');
        expect(input).toBeInTheDocument();
        expect(button).toBeInTheDocument();
    });

    it('should forward ref correctly', () => {
        const ref = jest.fn();
        render(
            <FieldComponent {...defaultProps} ref={ref}>
                <input type="text" />
            </FieldComponent>
        );

        // The ref should be called with the DOM element
        expect(ref).toHaveBeenCalled();
    });

    it('should handle all props together', () => {
        render(
            <FieldComponent
                label="Email Address"
                helperText="We'll never share your email"
                errorText="Please enter a valid email"
                required
                invalid
            >
                <input type="email" />
            </FieldComponent>
        );

        expect(screen.getByText('Email Address')).toBeInTheDocument();
        expect(screen.getByText("We'll never share your email")).toBeInTheDocument();
        expect(screen.getByText('Please enter a valid email')).toBeInTheDocument();
        expect(document.querySelector('[data-required]')).toBeInTheDocument();
    });

    it('should maintain accessibility', () => {
        render(
            <FieldComponent label="Username" required>
                <input type="text" id="username" />
            </FieldComponent>
        );

        const label = screen.getByText('Username');
        const input = screen.getByRole('textbox');
        
        // Check that label and input are properly associated
        expect(label).toBeInTheDocument();
        expect(input).toBeInTheDocument();
        expect(input).toHaveAttribute('id', 'username');
    });

    it('should handle empty strings gracefully', () => {
        render(
            <FieldComponent label="" helperText="" errorText="">
                <input type="text" />
            </FieldComponent>
        );

        // Should not crash with empty strings
        const input = screen.getByRole('textbox');
        expect(input).toBeInTheDocument();
    });

    it('should handle undefined props gracefully', () => {
        render(
            <FieldComponent
                label={undefined}
                helperText={undefined}
                errorText={undefined}
            >
                <input type="text" />
            </FieldComponent>
        );

        // Should not crash with undefined props
        const input = screen.getByRole('textbox');
        expect(input).toBeInTheDocument();
    });
});
